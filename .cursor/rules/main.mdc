---
description: 
globs: 
alwaysApply: true
---
# VLITZ — Frida 기반 CLI 동적 디버거 프로젝트

## 소개
VLITZ는 Frida를 기반으로 하는 고성능 CLI 디버깅 도구입니다.  
단순한 후킹 도구가 아닌 분석, 메모리 조작, 탐색, 자동화를 하나로 통합한 CLI 플랫폼입니다.

이 프로젝트는 다음을 목표로 합니다:
- 앱에 attach하여 동적 분석 수행
- 메서드/함수 후킹 및 호출
- 메모리 값 덤프, 변경, 추적
- 클래스/모듈/익스포트 정보 탐색
- 라벨링, 태그, 필터링, 자동화 스크립트 실행
- 루팅 탐지 우회, SSL 우회, 스피드핵 등 자동 preset 적용

## 아키텍처
모든 핵심 로직은 Rust로 구성되며, Frida 스크립트는 기능만 제공하는 RPC 호출로만 구성됩니다.

### 디렉토리 구조
- cli/ : CLI 입력, REPL, 프롬프트 관리
- core/ : 명령어 파싱 및 실행 로직
- script/ : .vzs 스크립트 파서 및 실행기
- preset/ : speedhack, unpinning 등 자동 후킹
- runtime/ : Frida 세션 및 스크립트 실행 관리
- shared/ : 공통 데이터 타입, 유틸, 파서 등

## VzData 시스템
`VzData`는 VLITZ의 핵심 데이터 모델입니다. 모든 log, lib 데이터는 VzData로 표현됩니다.

## 로깅 문자열 출력 포맷 (Log Formatting Spec)
로그에 출력되는 각 VzData는 다음의 공통 구조를 따른다:
[i] [<Type>] <DisplayName> (Label) [tags...]
예시 출력:
[0] [Class] MainActivity
[1] [Method] onCreate(String, Bundle) -> void
[2] [Function] ZN5Game7TakeHitEv @ 0x7ff8392000
[3] [Pointer] 0x7ff83de000 (Float) 47.32
[4] [Module] libil2cpp.so @ 0x7ff8300000 (12.3MB)
[5] [Range] 0x7fffdd3000 (384KB) [r--]
[6] [Variable] PlayerData @ 0x7ff82000
설명:
항목 | 의미
[i] | log/lib 인덱스
[Type] | VzData 타입
DisplayName | name, address, signature 등
(Label) | 선택된 경우에만 출력
[tags...] | 태그가 있는 경우 추가로 표시

컬러링은 CLI에서 타입, 값, 태그, 라벨 등을 시각적으로 구분하는 데 사용.

## VLITZ 세션 프롬프트 구조 (Navigation Prompt Format)
기본 구조:
vlitz>

선택된 VzData가 있는 경우:
vlitz:<Type>:<DisplayInfo>>

예시:
vlitz>
vlitz:Pointer:0x7ff83900>
vlitz:Method:Player::TakeDamage>
vlitz:Class:MainActivity>
vlitz:Module:libil2cpp.so>

단순히 주소만 선택된 경우에는 Pointer:주소,
클래스나 메서드, 함수 등은 Type:이름으로 표시한다.

선택 흐름 예시
vlitz> list module
[0] [Module] libc.so @ 0x7ff8300000
[1] [Module] libil2cpp.so @ 0x7ff8400000
vlitz> sel 1
vlitz:Module:libil2cpp.so> exports sendpacket
[0] [Function] sendpacket @ 0x7ff8482734
vlitz:Module:libil2cpp.so> sel 0
vlitz:Function:sendpacket> trace
모듈 선택 → export 검색 → export 선택 → trace까지 이어지는 자연스러운 흐름이 가능해야 함.

필터된 로그 예시
vlitz> grep label:"main"
[0] [Pointer] 0x7ff82a1000 (Float) 100.0 (main.hp)
라벨이나 태그가 있을 경우엔 괄호로 함께 출력
태그는 [health, boss] 식으로 표현 가능

# VzData 데이터 종류
Pointer : 메모리 주소 (타입, 크기 포함)
Function : 함수 이름 + 주소
Method : 메서드 이름 + 클래스, 인자 타입, 리턴 타입
Module : 모듈 이름, 주소, 크기
Class : 클래스 이름
Range : 메모리 주소 범위 + 보호 속성
Variable : 내보낸 전역변수 (주소 포함)
모든 VzData는 라벨, 태그를 붙일 수 있고, grep, find로 검색 가능해.

VzData는 공통적으로 label, tags, type(vzdata) 이 들어가.
이게 공통 필드고,
VzPointer - address, type(표기 메모리 타입), size(타입이 bytes인 경우 표기 길이, 외에도 float면 4, ulong이면 8 등등)
VzFunction - name(export 이름), address
VzMethod - class_name(속한 클래스이름), name(메서드 이름), args(args 타입 Vec), ret(return 타입)
VzClass - name(클래스 이름)
VzModule - name(모듈이름 libc.so 등), address, size(모듈 크기)
VzRange - address, size, protection(r-x, rwx 등), file?(range의 파일path 있을수도 있고 없을수도 있음)
VzVariable - name(export 이름), address
이렇게 총 7개의 데이터 필드를 지녀.

# 메모리 데이터 타입
Byte = Int8
UByte = UInt8
Short = Int16
UShort = Int16
Int = Int32
UInt = UInt32
Long = Int64
ULong = UInt64
Float
Double
Bool
Pointer
String = UTF8 = ASCII
Bytes = ByteArray
이렇게 부등호(=) 표시 해둔건 같은 거라고 보면돼.

이제 cli 명령어와 옵션들을 알려줄게.
frida 기반이다보니 옵션은 웬만하면 frida를 따라가.
vlitz <process_name>
이게 기본 사용법이야.
해당 명렁어로 프로세스에 attach하면 그때부터
vlitz> 이렇게 repl 세션이 열려.
vlitz cli의 공통 옵션으로는,
-D ID, --device ID 아이디에 따른 디바이스 연결
-U, --usb usb디바이스에 연결
-R, --remote 프리다 서버에 리모트
-H HOST, --host HOST 호스트에 따른 프리다 서버에 리모트
이게 vlitz의 디바이스 구분 옵션이야.
그 다음으론
-f TARGET, --file TARGET 타겟 파일 스폰 (안드면 com.example.app 등)
-n NAME, --attach-name NAME 이름에 따라 attach
-N ID, --attach-id ID 아이디에 따라 attach
-p PID, --attach-pid PID 피드에 따라 attach
-l SCRIPT, --load SCRIPT vzscript 로드
이게 이제 기본적인 attach 방법이야.
ex. $ vlitz -U -N com.example.app
이런식으로 사용하는거야.
하지만 원래 frida-ps랑 frida-ls-devices같은것도 포함해서
vlitz ps -U 이런식으로 process 보는거랑
vlitz devices 이렇게 device 목록 보기등 frida의 대부분 기능을 포함하고 있어.
vlitz ps는 -a와 -i옵션으로 application, installed 옵션을 추가로 붙일 수도 있고.
vlitz kill도 물론 있어.

이제 attach를 했으니 여기서부터 진짜 vlitz 디버깅 시작이야.
일단 주요 개념인 selector랑 vfe먼저 알려줄게.

# selector
Selector는 VzData를 불러오는 호출 역할을 해.
일반적으로 list class같은 명령어로 클래스들을 모두 불러오잖아?
그러면 그 데이터들은 log라는 배열에 있어.
일반적으로 VzData 저장소는 lib와 log가 있어.
log는 vlitz 세션 내에서 모듈, 네이티브 함수, 메서드, 메모리 등등을 검색하거나 불러올때 전부 log안에 들어가게 돼.
만약 list class activity1로 activity1이라는 string 문자열이 들어간 이름의 class를 쭉 찾았어. 이 값들은 전부 log로 이동하게 돼.
그 중에서 6번째 인덱스의 method을 전부 보고 싶다? 그러면 list method 6 이렇게 selector를 넣으면 돼.
selector는 단순 숫자도 되고, 여러 형식이 있어.
일반적으론 selector는 1개의 VzData를 호출하지만, 동시에 여러개를 호출 할 수도 있어.
그게 바로 다수 선택자랑 슬라이싱이야.
문법은 이래.
5 # 단일 selector
6,3,5 # 복수 selector (절대로 띄어쓰기 안됨. 다른 argu로 인식됨)
3-6 # sliced selector
all # 값 전체 (기본적으로 lib 우선 전체 선택. lib에 값이 없다면 log 전체 선택)
복수랑 슬라이싱 섞어서 쓸 수도 있어.
sav 4,6-7 이런식으로.
만약 log의 0번째 인덱스에 값이 있고 lib의 0번째 인덱스에도 값이 있다? 그러면 보통 lib이 우선순위가 더 높아서 lib의 데이터를 호출하게 돼.
근데 만약 내가 log의 0번째를 호출하고 싶다? 그러면 log:0 이런식으로 하면돼. 반대로 lib은 lib:0 이런 식.
log:5,8-11 이런식으로도 사용 가능하지.
그리고 selector를 안써도 되는 상황이 있는데, navigator에 해당 vzdata가 있는 경우야.
원래는
list class "activity1"
list method 4 "callback"
이런식으로 쓴다면
list class "activity1"
nav select 4
list method "callback"
이런식으로도 사용 가능해.
한번 selector 없이 사용했다고 navigator 의 데이터가 unselect 되진 않아.

#vfe
vfe는 vlitz filtering expression의 약자야.
말 그대로 lib나 log의 값들을 filtering 할때 사용해.
대표적으로 vfe를 사용하는 명령어는 list find, log filter 이 3개가 있어. 나중에 나오지만 각각 축약형으로 find, grep 명령어로 사용 가능하지.
사용법은 간단해.
만약 수많은 scan result의 Pointer들이 log에 있어.
그 중에서 Pointer의 address 주소가 0x300 이상인 것들만 걸러내고 싶으면, grep type=Pointer & address<0x300
이러면 돼.
형식은 [field]=[value] 이렇게 생겼어.
추가적으로 and나 or조건을 붙이고 싶다면 [field]=[value] & [field]=[value] 이런식이나 [field]=[value] | [field]=[value]이런식으로도 사용 가능해.
field는 아까 설명했던 VzData들의 필드이고, 만약 VzData에 filtering하려는 field가 없으면 바로 제외당해.
[field]=[value]의 부등호 = 부분도 =, !=, <, >, <=, >=, : 로 바꿔칠 수 있어.
나머진 흔히 보는 부등호인데 :는 생소할거야.
: 이 기호는 js의 includes라고 생각하면 편해.
배열이나 string타입의 field에서 특정 요소나 구문이 포함될때 작동해.
예를 들어 이렇게 사용 가능해.
module "lib"
filter name:.so & tag:"main module"
이러면 module 이름에 lib이랑 .so 구문이 들어가는 모듈만 필터링 되겠지.
이 외에도 Pointer 같은 경우에는 일반적인 field말고 메모리 field라는게 추가로 존재해.
예를들어 float<30.6 이러면 각 포인터들의 메모리들을 float로 읽고 30.6 이상인것만 필터링 되는거지.
근데 이 구문은 Pointer 데이터에서밖에 못써.
만약 다른 VzData가 있는데 사용했다? 그럼 그중에서 Pointer만 남아. 메모리 필드는 위에 설명했던 메모리 타입들 전부 사용 가능해 ascii:"hello world" & uint<4
이런식으로.
근데 어떤 데이터에 무슨 필드가 있는지 모르겠잖아? 그럴땐 fields [data] 명령어를 사용하면돼.
그냥 fields를 입력하면 데이터 종류들이 나오고, fields pointer(대소문자구분X) 하면 Pointer의 field와 각 필드의 타입이 나와.
참고로 argu에 string을 구별할땐, " 큰따옴표를 붙여도 되고 안붙여도돼.
붙여야 되는 경우는 string에 띄어쓰기(spacing)가 들어갈때 해야 하고, 아닌 경우엔 그냥 이어쓰면 알아서 string으로 처리 돼.

이제 명령어들을 알려줄게. 참고로 명령어 뒤에 붙는 () 소괄호 안에 문장은 축약가능 한 것이야.
예를 들어 scan search <value> [type] (search) 이렇게 되어 있으면, scan search 50 float 이걸 search 50 float 이렇게 축약 가능해. <>는 필수 arg고 []는 선택 arg야.
# Navigator
nav select <selector> (sel) # 해당 data를 navigate. (navigator는 하나의 vzdata만 허용 하므로, 다중 selector 사용 불가)
nav unselect (unsel) # 선택 취소
nav add <offset> (+) # address 필드를 가진 VzData인 경우, 선택된 vzdata를 Pointer로 변환 후 address 에서 offset만큼 이동 (ex. + 0xa0)
nav sub <offset> (-) # nav add와 동일. 그저 뒤로 이동 (ex. - 0x1f)
nav goto <selector | address> (:) # address필드를 가진 vzdata를 selector로 넣으면 해당 주소로 이동. address로 직접적으로 넣으면 바로 이동. (ex. : 0x300)
# Log - log는 currentpage가 있어서 config에 최대 출력 데이터 갯수만큼 출력하고 이후는 nxt나 prv를 이용하여 봐야해.
log list [page] (lg) # log 목록 조회
log next [page(default=1)] (nxt) # log 페이지 넘김
log prev [page(d=1)] (prv) # log 페이지 뒤로넘김
log sort [field(d=name)] # log 목록을 정렬(field가 없으면 name -> address 순으로 정렬)
# Library
lib list [page] (ls) # lib 목록 조회
lib save <selector> (sav) # log에서 lib로 데이터 스냅샷 가져오기. (이때 데이터는 복사되는 거임. 참조가 아님) (ex. sav 4-7,10) (ex. sav all)
lib move <from> <to> (mv) # lib내에서 index 이동.
lib remove <selector> (rm) # lib 내에서 값 삭제.
lib clear [vfe] (clr) # lib내에서 값 전부 삭제. (vfe가 있다면 필터링 되어 삭제)
# Meta
meta label <selector> <string> # 해당 vzdata에 라벨 붙임
meta tag <selector> <string> # 해당 vzdata에 태그 추가
meta untag <selector> <string> # 해당 vzdata에 태그 제거
meta tags <selector> # 태그 조회
# List
list class [key] # class 목록 로깅(ios면 objc, android면 java, .net이면 dotnet)
list method [class selector] [key] # class의 method목록 로깅
list module [key] # module 목록 로깅
list exports [module selector] [key] # module내에서 네이티브 function, variable들 로깅
list range [protection(d=r--)] # range 로깅
# Memory
mem dump [address selector] <min_lines> <max_lines> [memory type] (d) # address를 기준으로 -min lines부터 +max line까지 메모리 덤프표시. (1 line에 0x10 byte) (기본적으로 bytes로 표기하돼, type이 있을 경우 옆에다가 그 타입에 따른 값들 표기)
mem read [address selector] [type(d=uint)] (r) # 값을 read. (type이 지정되지 않은 경우, 만약 해당 vzdata에 type이 있으면 그 type을 조회, 없다면 uint를 조회)
mem write [address selector] (w) <value> [type(d=uint)] # read랑 동일
mem list [page] (lm) # lock, watch, trace 한 주소들을 조회 (lib, log랑 다름. vzdata가 아닌 형태의 주소로 저장됨) (unlock, unwatch, untrace 등 detach 하기 위해 조회하는 역할)
mem watch [address selector] [type(d=uint)] # 값 변경 감지
mem lock [address selector] <value> [type(d=uint)] # 값 고정
mem trace [address selector] [type(d=uint)] # 값 추적
mem unwatch [selector] # 여기 selector는 log, lib이 아닌 mem list의 값들만 적용됨 (nav vzdata의 address 제외)
mem unlock [selector] # 이하동문
mem untrace [selector] # 이하동문
mem type <pointer selector> <type> # 해당 포인터의 표기 타입 변경 (nav는 취급 안함)
mem disas [address selector] # Instruction.parse로 해당 줄을 disassemble하여 표기.
# Attacher
attach hook [method | function selector] # method, function 둘다 올 수 있음. 대상 후킹하여 args, retval 로깅
attach unhook [selector] # 이 역시 attach list에 있는 값들만 취급함.
attach call [method | function selector] [args...] # 대상을 강제로 뒤에 오는 arguments와 함께 call.
attach list [page] (la) # 후킹된 method, function 표시.
# Scanner
scan search <value> [memory type(d=uint)] [protection(d=r-x) | range selector] # 범위에서 scanSync로 값 스캔
scan exact <value> [memory type] # filter랑 비슷하지만, log에 전부 pointer일때 해당 값에 맞는 주소들을 필터링(next scan과 같음) 마찬가지로 memory type 안적으면 pointer vzdata의 표기 type으로 스캔함.
scan min <value> [memory type] # 보다 큰 값들 필터링 (uint, long, float, double과 같이 숫자형 memory type만 적용)
scan max <value> [memory type] # 보다 작은 값들 필터링 (숫자메모리타입만 적용)
scan inc # 이전보다 값이 올라간 값들 필터링 (숫자만 적용)
scan dec # 이전보다 값이 줄어든 값들 필터링 (숫자만)
scan ch # 이전과 값이 달라진 변해버린 값들 필터링
scan unch # 이전과 값이 같은 변하지 않은 값들 필터링
# other utilities
fields [type] # vzdata의 field들 조회
help [command] # 도움 명령어 출력
run [path] # vzscript 실행

여기까지 모든 명령어들 이었고, 앞에 접미사는 축약 가능해. (단, 해당 명령어가 하나만 존재하는 경우)
예를 들어 list module여기서 list가 빠지고 module만 써도 가능해.
근데 mem list같은 경우엔 lib list, attach list 등과 같이 명령어가 겹쳐서 list 이렇게 사용을 못해.
scan같은 경우도
search 20 ulong
min 10
dec
이런식으로 겹치지만 않는 다면 앞에 scan을 축약할 수도 있지.
attach 같은 경우도 call, hook, unhook이나 메모리같은 경우도 read, write, dump 이렇게 축약 가능해.
내가 따로 축약문을 적은 nav add같은 경우도 + 0x545도 되고 add 0x545도 가능해.

## 명령어 사용 예시

search 47.3 float  
filter float=47.3  
sel 0
trace

list class "MainActivity"  
sel 0  
list method
sel 3  
hook

: 0x12345678
read float
write 500 float

## 요청사항
이 모든 명세를 기반으로 VLITZ의 구조 및 코드를 Rust로 설계해주세요.
Frida 스크립트는 최소화하며, 모든 로직은 rust에서 실행되며,
RPC 인터페이스를 통해 Frida의 기능만 제공합니다.

REPL 기반 CLI이며, rustyline 또는 readline을 사용할 수 있습니다.
데이터 저장소는 lib, log이며 공통된 VzData 구조를 따릅니다.

VzData, 필터 엔진, 명령어 파서, 스크립트 실행기 등을 모듈화된 구조로 구현해주세요.
